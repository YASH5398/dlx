import React, { useEffect, useMemo, useState } from 'react';
import { useWallet } from '../../hooks/useWallet';
import { firestore } from '../../firebase';
import { doc, collection, onSnapshot, addDoc, query, orderBy, serverTimestamp } from 'firebase/firestore';
import { useUser } from '../../context/UserContext';
import { useNotifications } from '../../context/NotificationContext';
import DLXWalletCard from '../../components/DLXWalletCard';

type DepositMethod = 'usdt' | 'inr';
type WithdrawMethod = 'usdt' | 'inr';
type Blockchain = 'bep20' | 'trc20';
type FlowType = 'deposit' | 'withdraw' | 'swap' | null;

interface Transaction {
  id: string;
  date: string;
  type: 'deposit' | 'withdraw' | 'swap';
  amount: string;
  currency: string;
  status: 'completed' | 'pending' | 'failed' | 'success' | 'approved' | 'rejected';
  description: string;
  createdAt?: number;
}

export default function Wallet() {
  const { wallet } = useWallet();
  const { user } = useUser();
  const { addNotification } = useNotifications();
  const uid = user?.id;
  
  const [activeFlow, setActiveFlow] = useState<FlowType>(null);
  const [depositStep, setDepositStep] = useState(1);
  const [withdrawStep, setWithdrawStep] = useState(1);
  const [swapStep, setSwapStep] = useState(1);
  const [depositMethod, setDepositMethod] = useState<DepositMethod | null>(null);
  const [withdrawMethod, setWithdrawMethod] = useState<WithdrawMethod | null>(null);
  const [blockchain, setBlockchain] = useState<Blockchain | null>(null);
  const [depositAmount, setDepositAmount] = useState('');
  const [withdrawAmount, setWithdrawAmount] = useState('');
  const [swapAmount, setSwapAmount] = useState('');
  const [upi, setUpi] = useState('');
  const [walletAddress, setWalletAddress] = useState('');
  const [txHash, setTxHash] = useState('');
  const [txHashFile, setTxHashFile] = useState<File | null>(null);
  const [isProcessing, setIsProcessing] = useState(false);
  const [isTransitioning, setIsTransitioning] = useState(false);
  const [transactions, setTransactions] = useState<Transaction[]>([]);
  const [copySuccess, setCopySuccess] = useState(false);

  // Firestore-streamed wallet breakdown
  const [mainUsdt, setMainUsdt] = useState(0);
  const [mainInr, setMainInr] = useState(0);
  const [purchaseUsdt, setPurchaseUsdt] = useState(0);
  const [purchaseInr, setPurchaseInr] = useState(0);

  const dlxUsdRate = 0.1;
  const dlxUsdValue = useMemo(() => (wallet?.dlx ?? 0) * dlxUsdRate, [wallet?.dlx]);
  const swapUsdtValue = useMemo(() => (parseFloat(swapAmount) || 0) * dlxUsdRate, [swapAmount]);

  const depositAddress = {
    bep20: '0x85fdfd1a83c4bc9a8c11f3b1308ead5d397d41d3',
    trc20: 'TH1s69X1MqxJJme6BVPU3XFXhk8QwSXa7M'
  };

  // Stream wallet from canonical Firestore wallets collection
  useEffect(() => {
    if (!uid) return;
    const walletDoc = doc(firestore, 'wallets', uid);
    const unsub = onSnapshot(walletDoc, (snap) => {
      try {
        if (!snap.exists()) {
          console.warn('Wallet: Document does not exist for user:', uid);
          console.warn('Wallet: This may cause the $900 discrepancy. Creating wallet document...');
          
          // Try to create the wallet document if it doesn't exist
          const { setDoc, serverTimestamp } = require('firebase/firestore');
          setDoc(walletDoc, {
            usdt: { mainUsdt: 0, purchaseUsdt: 0 },
            inr: { mainInr: 0, purchaseInr: 0 },
            dlx: 0,
            walletUpdatedAt: serverTimestamp()
          }).then(() => {
            console.log('Wallet: Document created successfully');
          }).catch((err: any) => {
            console.error('Wallet: Failed to create document:', err);
          });
          
          setMainUsdt(0);
          setPurchaseUsdt(0);
          setMainInr(0);
          setPurchaseInr(0);
          return;
        }

        const d = (snap.data() as any) || {};
        const usdt = d.usdt || {};
        const inr = d.inr || {};
        
        const mainUsdt = Number(usdt.mainUsdt || 0);
        const purchaseUsdt = Number(usdt.purchaseUsdt || 0);
        const mainInr = Number(inr.mainInr || 0);
        const purchaseInr = Number(inr.purchaseInr || 0);
        
        setMainUsdt(mainUsdt);
        setPurchaseUsdt(purchaseUsdt);
        setMainInr(mainInr);
        setPurchaseInr(purchaseInr);
        
        console.log('Wallet: Data updated (canonical):', { 
          mainUsdt, 
          purchaseUsdt,
          mainInr,
          purchaseInr,
          rawData: d
        });
      } catch (error) {
        console.error('Wallet: Error processing data:', error);
        setMainUsdt(0);
        setPurchaseUsdt(0);
        setMainInr(0);
        setPurchaseInr(0);
      }
    }, (err) => {
      console.error('Wallet: Stream failed:', err);
      setMainUsdt(0);
      setPurchaseUsdt(0);
      setMainInr(0);
      setPurchaseInr(0);
    });
    return () => { try { unsub(); } catch {} };
  }, [uid]);

  // Stream recent transactions from Firestore
  useEffect(() => {
    if (!uid) return;
    const txQ = query(collection(firestore, 'wallets', uid, 'transactions'), orderBy('createdAt', 'desc'));
    const unsub = onSnapshot(txQ, (snap) => {
      const rows: Transaction[] = [];
      snap.forEach((docSnap) => {
        const t = docSnap.data() as any;
        const ts = t.createdAt?.toMillis ? t.createdAt.toMillis() : Number(t.createdAt || 0);
        rows.push({
          id: docSnap.id,
          date: ts ? new Date(ts).toLocaleString() : '',
          type: t.type as Transaction['type'],
          amount: (typeof t.amount === 'number' ? t.amount : parseFloat(String(t.amount || '0'))).toFixed(2),
          currency: t.currency ?? 'USDT',
          status: (t.status as Transaction['status']) ?? 'pending',
          description: t.description ?? '',
          createdAt: ts || 0,
        });
      });
      rows.sort((a, b) => (b.createdAt ?? 0) - (a.createdAt ?? 0));
      setTransactions(rows);
    });
    return () => { try { unsub(); } catch {} };
  }, [uid]);

  const handleFlowChange = (flow: FlowType) => {
    setIsTransitioning(true);
    setTimeout(() => {
      setActiveFlow(flow);
      setDepositStep(1);
      setWithdrawStep(1);
      setSwapStep(1);
      setDepositMethod(null);
      setWithdrawMethod(null);
      setBlockchain(null);
      setDepositAmount('');
      setWithdrawAmount('');
      setSwapAmount('');
      setUpi('');
      setWalletAddress('');
      setTxHash('');
      setTxHashFile(null);
      setIsTransitioning(false);
    }, 500);
  };

  const copyToClipboard = (text: string) => {
    navigator.clipboard.writeText(text).then(() => {
      setCopySuccess(true);
      setTimeout(() => setCopySuccess(false), 2000);
    });
  };

  const handleDeposit = async () => {
    const amt = parseFloat(depositAmount);
    if (!uid || !amt || amt <= 0) return;
    if (depositMethod === 'usdt' && !txHash) return;
    if (depositMethod === 'inr' && !upi) return;
    
    setIsProcessing(true);
    const currency = depositMethod === 'inr' ? 'INR' : 'USDT';
    const method = depositMethod === 'usdt' ? `usdt-${blockchain}` : 'inr-upi';
    const notes = depositMethod === 'inr' ? `UPI: ${upi}` : `Network: ${String(blockchain).toUpperCase()}`;

    try {
      // Use atomic API for deposit request creation
      const { createDepositRequest } = await import('../../utils/transactionAPI');
      
      await createDepositRequest({
        userId: uid,
        amount: amt,
        method,
        currency,
        fees: 0,
        txnId: depositMethod === 'usdt' ? txHash : undefined,
        notes
      });
      
      try { 
        await addNotification({ 
          type: 'transaction', 
          message: `Deposit submitted: ${amt} ${currency} (Awaiting verification)` 
        }, true); 
      } catch {}
      
      handleFlowChange(null);
    } catch (e: any) {
      try { 
        await addNotification({ 
          type: 'error', 
          message: e?.message || 'Deposit submission failed.' 
        }, false); 
      } catch {}
    } finally {
      setIsProcessing(false);
    }
  };

  const handleWithdraw = async () => {
    const amt = parseFloat(withdrawAmount);
    if (!uid || !amt || amt <= 0) return;
    if (withdrawMethod === 'usdt' && (!walletAddress || !blockchain)) return;
    if (withdrawMethod === 'inr' && !upi) return;
    
    setIsProcessing(true);
    const currency = withdrawMethod === 'inr' ? 'INR' : 'USDT';
    const description = withdrawMethod === 'inr' 
      ? 'Withdrawal to UPI' 
      : `Withdrawal to ${blockchain?.toUpperCase()}`;

    try {
      // Use atomic API for withdrawal request creation
      const { createWithdrawalRequest } = await import('../../utils/transactionAPI');
      
      const method = withdrawMethod === 'usdt' ? `usdt-${blockchain}` : 'inr-upi';
      const notes = withdrawMethod === 'usdt' 
        ? `Address: ${walletAddress} | Network: ${String(blockchain).toUpperCase()}` 
        : `UPI: ${upi}`;
      
      await createWithdrawalRequest({
        userId: uid,
        amount: amt,
        method,
        walletType: 'main',
        currency,
        fees: 0,
        notes
      });
      
      try { 
        await addNotification({ 
          type: 'transaction', 
          message: `Withdrawal requested: ${amt} ${currency} (Awaiting verification)` 
        }, true); 
      } catch {}
      
      handleFlowChange(null);
    } catch (e: any) {
      try { 
        await addNotification({ 
          type: 'error', 
          message: e?.message || 'Withdrawal request failed.' 
        }, false); 
      } catch {}
    } finally {
      setIsProcessing(false);
    }
  };

  const handleSwap = async () => {
    const dlxAmount = parseFloat(swapAmount);
    if (!uid || !dlxAmount || dlxAmount < 50 || dlxAmount > wallet.dlx) return;
    
    setIsProcessing(true);
    const now = Date.now();
    const usdtAmount = dlxAmount * dlxUsdRate;

    try {
      const txCol = collection(firestore, 'wallets', uid, 'transactions');
      await addDoc(txCol, {
        type: 'swap',
        amount: Number(usdtAmount.toFixed(2)),
        currency: 'USDT',
        status: 'pending',
        description: `Swapped ${dlxAmount.toFixed(2)} DLX to ${usdtAmount.toFixed(2)} USDT (Admin Verification Pending)`,
        createdAt: now,
      });
      
      try { 
        await addNotification({ 
          type: 'transaction', 
          message: `Swap submitted: ${dlxAmount.toFixed(2)} DLX to ${usdtAmount.toFixed(2)} USDT (Awaiting verification)` 
        }, true); 
      } catch {}
      
      handleFlowChange(null);
    } catch (e: any) {
      try { 
        await addNotification({ 
          type: 'error', 
          message: e?.message || 'Swap failed.' 
        }, false); 
      } catch {}
    } finally {
      setIsProcessing(false);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': 
      case 'success': return 'bg-emerald-500/20 text-emerald-400 border-emerald-500/30';
      case 'approved': return 'bg-blue-500/20 text-blue-400 border-blue-500/30';
      case 'pending': return 'bg-amber-500/20 text-amber-400 border-amber-500/30';
      case 'failed': 
      case 'rejected': return 'bg-rose-500/20 text-rose-400 border-rose-500/30';
      default: return 'bg-slate-500/20 text-slate-400 border-slate-500/30';
    }
  };

  const getTypeIcon = (type: string) => {
    switch (type) {
      case 'deposit':
        return (
          <div className="w-10 h-10 rounded-full bg-emerald-500/20 flex items-center justify-center">
            <svg className="w-5 h-5 text-emerald-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m0 0l-4-4m4 4l4-4" />
            </svg>
          </div>
        );
      case 'withdraw':
        return (
          <div className="w-10 h-10 rounded-full bg-rose-500/20 flex items-center justify-center">
            <svg className="w-5 h-5 text-rose-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 20V4m0 0l4 4m-4-4l-4 4" />
            </svg>
          </div>
        );
      case 'swap':
        return (
          <div className="w-10 h-10 rounded-full bg-violet-500/20 flex items-center justify-center">
            <svg className="w-5 h-5 text-violet-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
            </svg>
          </div>
        );
      default:
        return null;
    }
  };

  const ProgressBar = ({ currentStep, totalSteps }: { currentStep: number; totalSteps: number }) => (
    <div className="w-full mb-8">
      <div className="flex items-center justify-between mb-2">
        <span className="text-sm font-medium text-slate-400">Step {currentStep} of {totalSteps}</span>
        <span className="text-sm font-medium text-slate-400">{Math.round((currentStep / totalSteps) * 100)}%</span>
      </div>
      <div className="flex gap-2">
        {Array.from({ length: totalSteps }).map((_, idx) => (
          <div
            key={idx}
            className={`h-2 flex-1 rounded-full transition-all duration-500 ${
              idx < currentStep
                ? 'bg-gradient-to-r from-violet-500 to-fuchsia-500'
                : 'bg-slate-700'
            }`}
          />
        ))}
      </div>
    </div>
  );

  const renderMainPage = () => (
    <div className={`min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-white transition-opacity duration-500 ${isTransitioning ? 'opacity-0' : 'opacity-100'}`}>
      <div className="container mx-auto px-4 py-6 max-w-4xl">
        {/* Hero Section */}
        <div className="relative mb-8">
          <div className="absolute inset-0 bg-gradient-to-r from-blue-600/20 via-purple-600/20 to-pink-600/20 rounded-3xl blur-3xl"></div>
          <div className="relative bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-3xl p-8 border border-white/10 shadow-2xl">
            <div className="text-center mb-8">
              <h1 className="text-5xl font-bold mb-4 bg-gradient-to-r from-blue-400 via-purple-400 to-pink-400 bg-clip-text text-transparent">
                Digital Wallet
              </h1>
              <p className="text-slate-300 text-lg">Manage your crypto assets with ease</p>
            </div>
            
            {/* Total Balance Overview */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
              <div className="text-center p-6 bg-gradient-to-br from-blue-500/10 to-cyan-500/10 rounded-2xl border border-blue-500/20">
                <div className="text-3xl font-bold text-blue-400 mb-2">${(mainUsdt + purchaseUsdt).toFixed(2)}</div>
                <div className="text-slate-400 text-sm">Total USDT</div>
              </div>
              <div className="text-center p-6 bg-gradient-to-br from-purple-500/10 to-pink-500/10 rounded-2xl border border-purple-500/20">
                <div className="text-3xl font-bold text-purple-400 mb-2">{wallet.dlx.toFixed(2)}</div>
                <div className="text-slate-400 text-sm">DLX Tokens</div>
              </div>
              <div className="text-center p-6 bg-gradient-to-br from-emerald-500/10 to-green-500/10 rounded-2xl border border-emerald-500/20">
                <div className="text-3xl font-bold text-emerald-400 mb-2">₹{((mainUsdt + purchaseUsdt) * 80).toFixed(2)}</div>
                <div className="text-slate-400 text-sm">INR Value</div>
              </div>
            </div>
          </div>
        </div>

        {/* Wallet Cards Grid */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
          {/* DLX Wallet - Enhanced */}
          <div className="lg:col-span-2">
            <DLXWalletCard />
          </div>

          {/* Main Wallet - Redesigned */}
          <div className="group relative overflow-hidden rounded-3xl bg-gradient-to-br from-violet-500/10 via-fuchsia-500/10 to-pink-500/10 border border-violet-500/20 backdrop-blur-xl p-8 shadow-2xl hover:shadow-violet-500/25 transition-all duration-500 hover:scale-105">
            <div className="absolute top-0 right-0 w-32 h-32 bg-violet-500/20 rounded-full blur-2xl -z-10"></div>
            <div className="absolute bottom-0 left-0 w-24 h-24 bg-fuchsia-500/20 rounded-full blur-xl -z-10"></div>
            
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-violet-500 to-fuchsia-500 flex items-center justify-center shadow-2xl group-hover:scale-110 transition-transform duration-300">
                  <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M3 10h18M7 15h1m4 0h1m-7 4h12a3 3 0 003-3V8a3 3 0 00-3-3H6a3 3 0 00-3 3v8a3 3 0 003 3z" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white mb-1">Main Wallet</h3>
                  <p className="text-violet-300 text-sm">Primary USDT Balance</p>
                </div>
              </div>
              <div className="text-right">
                <div className="text-4xl font-bold text-white mb-1">{mainUsdt.toFixed(2)}</div>
                <div className="text-violet-300 text-sm">USDT</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between text-sm">
              <span className="text-slate-400">Available Balance</span>
              <span className="text-white font-semibold">${mainUsdt.toFixed(2)}</span>
            </div>
          </div>

          {/* Purchase Wallet - Redesigned */}
          <div className="group relative overflow-hidden rounded-3xl bg-gradient-to-br from-cyan-500/10 via-blue-500/10 to-indigo-500/10 border border-cyan-500/20 backdrop-blur-xl p-8 shadow-2xl hover:shadow-cyan-500/25 transition-all duration-500 hover:scale-105">
            <div className="absolute top-0 right-0 w-32 h-32 bg-cyan-500/20 rounded-full blur-2xl -z-10"></div>
            <div className="absolute bottom-0 left-0 w-24 h-24 bg-blue-500/20 rounded-full blur-xl -z-10"></div>
            
            <div className="flex items-center justify-between mb-6">
              <div className="flex items-center gap-4">
                <div className="w-16 h-16 rounded-2xl bg-gradient-to-br from-cyan-500 to-blue-500 flex items-center justify-center shadow-2xl group-hover:scale-110 transition-transform duration-300">
                  <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                  </svg>
                </div>
                <div>
                  <h3 className="text-2xl font-bold text-white mb-1">Purchase Wallet</h3>
                  <p className="text-cyan-300 text-sm">Shopping & Payments</p>
                </div>
              </div>
              <div className="text-right">
                <div className="text-4xl font-bold text-white mb-1">{purchaseUsdt.toFixed(2)}</div>
                <div className="text-cyan-300 text-sm">USDT</div>
              </div>
            </div>
            
            <div className="flex items-center justify-between text-sm">
              <span className="text-slate-400">Available Balance</span>
              <span className="text-white font-semibold">${purchaseUsdt.toFixed(2)}</span>
            </div>
          </div>
        </div>

        {/* Action Buttons - Redesigned */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-8">
          <button
            onClick={() => handleFlowChange('deposit')}
            className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-emerald-500 to-teal-500 p-8 shadow-2xl hover:shadow-emerald-500/50 transition-all duration-500 hover:scale-105"
          >
            <div className="absolute inset-0 bg-white/20 translate-y-full group-hover:translate-y-0 transition-transform duration-500"></div>
            <div className="relative z-10 text-center">
              <div className="w-16 h-16 mx-auto mb-4 rounded-2xl bg-white/20 flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m0 0l-4-4m4 4l4-4" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-white mb-2">Deposit</h3>
              <p className="text-emerald-100 text-sm">Add funds to your wallet</p>
            </div>
          </button>
          
          <button
            onClick={() => handleFlowChange('withdraw')}
            className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-rose-500 to-pink-500 p-8 shadow-2xl hover:shadow-rose-500/50 transition-all duration-500 hover:scale-105"
          >
            <div className="absolute inset-0 bg-white/20 translate-y-full group-hover:translate-y-0 transition-transform duration-500"></div>
            <div className="relative z-10 text-center">
              <div className="w-16 h-16 mx-auto mb-4 rounded-2xl bg-white/20 flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 20V4m0 0l4 4m-4-4l-4 4" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-white mb-2">Withdraw</h3>
              <p className="text-rose-100 text-sm">Send funds to external wallet</p>
            </div>
          </button>
          
          <button
            onClick={() => handleFlowChange('swap')}
            className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-violet-500 to-fuchsia-500 p-8 shadow-2xl hover:shadow-violet-500/50 transition-all duration-500 hover:scale-105"
          >
            <div className="absolute inset-0 bg-white/20 translate-y-full group-hover:translate-y-0 transition-transform duration-500"></div>
            <div className="relative z-10 text-center">
              <div className="w-16 h-16 mx-auto mb-4 rounded-2xl bg-white/20 flex items-center justify-center group-hover:scale-110 transition-transform duration-300">
                <svg className="w-8 h-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 7h12m0 0l-4-4m4 4l-4 4m0 6H4m0 0l4 4m-4-4l4-4" />
                </svg>
              </div>
              <h3 className="text-xl font-bold text-white mb-2">Swap</h3>
              <p className="text-violet-100 text-sm">Exchange DLX for USDT</p>
            </div>
          </button>
        </div>

        {/* Recent Transactions - Redesigned */}
        <div className="bg-gradient-to-br from-slate-800/50 to-slate-900/50 backdrop-blur-xl rounded-3xl p-8 border border-white/10 shadow-2xl">
          <div className="flex items-center justify-between mb-6">
            <h3 className="text-2xl font-bold text-white flex items-center gap-3">
              <div className="w-10 h-10 rounded-xl bg-gradient-to-br from-violet-500 to-fuchsia-500 flex items-center justify-center">
                <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v12a2 2 0 002 2h10a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                </svg>
              </div>
              Recent Transactions
            </h3>
            <button className="text-violet-400 hover:text-violet-300 text-sm font-medium transition-colors">
              View All
            </button>
          </div>
          
          <div className="space-y-4">
            {transactions.length === 0 ? (
              <div className="text-center py-12">
                <div className="w-20 h-20 mx-auto mb-4 rounded-full bg-gradient-to-br from-slate-700 to-slate-800 flex items-center justify-center">
                  <svg className="w-10 h-10 text-slate-500" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M20 13V6a2 2 0 00-2-2H6a2 2 0 00-2 2v7m16 0v5a2 2 0 01-2 2H6a2 2 0 01-2-2v-5m16 0h-2.586a1 1 0 00-.707.293l-2.414 2.414a1 1 0 01-.707.293h-3.172a1 1 0 01-.707-.293l-2.414-2.414A1 1 0 006.586 13H4" />
                  </svg>
                </div>
                <h4 className="text-lg font-semibold text-white mb-2">No transactions yet</h4>
                <p className="text-slate-400">Your transaction history will appear here</p>
              </div>
            ) : (
              transactions.slice(0, 5).map((tx) => (
                <div key={tx.id} className="group flex items-center gap-4 p-6 rounded-2xl bg-slate-700/30 hover:bg-slate-700/50 border border-slate-600/30 transition-all duration-300 hover:scale-102">
                  <div className="flex-shrink-0">
                    {getTypeIcon(tx.type)}
                  </div>
                  <div className="flex-1 min-w-0">
                    <div className="flex items-start justify-between gap-2 mb-2">
                      <p className="text-white font-medium text-base truncate">{tx.description}</p>
                      <p className={`text-lg font-bold whitespace-nowrap ${tx.type === 'withdraw' ? 'text-rose-400' : 'text-emerald-400'}`}>
                        {tx.type === 'withdraw' ? '-' : '+'}{tx.amount} {tx.currency}
                      </p>
                    </div>
                    <div className="flex items-center justify-between gap-2">
                      <span className="text-sm text-slate-400">{tx.date}</span>
                      <span className={`px-3 py-1 rounded-full text-xs font-medium border ${getStatusColor(tx.status)}`}>
                        {tx.status.toUpperCase()}
                      </span>
                    </div>
                  </div>
                </div>
              ))
            )}
          </div>
        </div>
      </div>
    </div>
  );

  const renderDepositFlow = () => {
    const getTotalSteps = () => {
      if (depositMethod === 'inr') return 3;
      if (depositMethod === 'usdt') return 5;
      return 5;
    };

    return (
      <div className={`min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-white transition-opacity duration-500 ${isTransitioning ? 'opacity-0' : 'opacity-100'}`}>
        <div className="container mx-auto px-4 py-8 max-w-lg min-h-screen flex flex-col">
          {/* Header */}
          <div className="mb-6">
            <button
              onClick={() => depositStep === 1 ? handleFlowChange(null) : setDepositStep(depositStep - 1)}
              className="flex items-center gap-2 text-slate-400 hover:text-white transition-colors mb-4"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              <span>Back</span>
            </button>
            <h2 className="text-3xl font-bold bg-gradient-to-r from-emerald-400 to-teal-400 bg-clip-text text-transparent">
              Deposit Funds
            </h2>
          </div>

          <ProgressBar currentStep={depositStep} totalSteps={getTotalSteps()} />

          <div className="flex-1 flex flex-col">
            {/* Step 1: Select Deposit Method */}
            {depositStep === 1 && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Select Deposit Method</h3>
                  <p className="text-slate-400 text-sm">Choose how you want to deposit funds</p>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <button
                    onClick={() => {
                      setDepositMethod('usdt');
                      setDepositStep(2);
                    }}
                    className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-amber-500/20 to-yellow-500/20 border-2 border-amber-500/30 hover:border-amber-500 p-8 transition-all duration-300 hover:scale-105"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-amber-500/0 to-yellow-500/0 group-hover:from-amber-500/10 group-hover:to-yellow-500/10 transition-all duration-300" />
                    <div className="text-6xl mb-4">💵</div>
                    <p className="text-white font-bold text-lg">USDT</p>
                    <p className="text-slate-400 text-xs mt-1">Cryptocurrency</p>
                  </button>

                  <button
                    onClick={() => {
                      setDepositMethod('inr');
                      setDepositStep(2);
                    }}
                    className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-blue-500/20 to-indigo-500/20 border-2 border-blue-500/30 hover:border-blue-500 p-8 transition-all duration-300 hover:scale-105"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-blue-500/0 to-indigo-500/0 group-hover:from-blue-500/10 group-hover:to-indigo-500/10 transition-all duration-300" />
                    <div className="text-6xl mb-4">🇮🇳</div>
                    <p className="text-white font-bold text-lg">INR</p>
                    <p className="text-slate-400 text-xs mt-1">Indian Rupee</p>
                  </button>
                </div>
              </div>
            )}

            {/* Step 2: Select Blockchain (USDT) or Enter Amount (INR) */}
            {depositStep === 2 && depositMethod === 'usdt' && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Select Blockchain Network</h3>
                  <p className="text-slate-400 text-sm">Choose the network for your deposit</p>
                </div>

                <div className="space-y-4">
                  <button
                    onClick={() => {
                      setBlockchain('bep20');
                      setDepositStep(3);
                    }}
                    className="group w-full relative overflow-hidden rounded-2xl bg-gradient-to-r from-yellow-500/20 to-amber-500/20 border-2 border-yellow-500/30 hover:border-yellow-500 p-6 transition-all duration-300 hover:scale-102 text-left"
                  >
                    <div className="absolute inset-0 bg-gradient-to-r from-yellow-500/0 to-amber-500/0 group-hover:from-yellow-500/10 group-hover:to-amber-500/10 transition-all duration-300" />
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-yellow-500 to-amber-500 flex items-center justify-center flex-shrink-0">
                        <span className="text-2xl">🔗</span>
                      </div>
                      <div>
                        <p className="text-white font-bold text-lg">Binance Smart Chain</p>
                        <p className="text-slate-400 text-sm">BEP20 Network</p>
                      </div>
                    </div>
                  </button>

                  <button
                    onClick={() => {
                      setBlockchain('trc20');
                      setDepositStep(3);
                    }}
                    className="group w-full relative overflow-hidden rounded-2xl bg-gradient-to-r from-red-500/20 to-rose-500/20 border-2 border-red-500/30 hover:border-red-500 p-6 transition-all duration-300 hover:scale-102 text-left"
                  >
                    <div className="absolute inset-0 bg-gradient-to-r from-red-500/0 to-rose-500/0 group-hover:from-red-500/10 group-hover:to-rose-500/10 transition-all duration-300" />
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-red-500 to-rose-500 flex items-center justify-center flex-shrink-0">
                        <span className="text-2xl">⚡</span>
                      </div>
                      <div>
                        <p className="text-white font-bold text-lg">TRON Network</p>
                        <p className="text-slate-400 text-sm">TRC20 Network</p>
                      </div>
                    </div>
                  </button>
                </div>
              </div>
            )}

            {depositStep === 2 && depositMethod === 'inr' && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Enter Deposit Amount</h3>
                  <p className="text-slate-400 text-sm">How much would you like to deposit?</p>
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Amount in INR</label>
                    <div className="relative">
                      <span className="absolute left-4 top-1/2 -translate-y-1/2 text-slate-400 text-lg">₹</span>
                      <input
                        type="number"
                        placeholder="0.00"
                        value={depositAmount}
                        onChange={(e) => setDepositAmount(e.target.value)}
                        className="w-full pl-10 pr-16 py-4 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-emerald-500 text-white text-lg font-semibold focus:outline-none transition-all"
                      />
                      <span className="absolute right-4 top-1/2 -translate-y-1/2 text-slate-400 font-medium">INR</span>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {[500, 1000, 5000, 10000].map((amount) => (
                      <button
                        key={amount}
                        onClick={() => setDepositAmount(amount.toString())}
                        className="px-4 py-2 rounded-lg bg-slate-700 hover:bg-slate-600 text-white text-sm font-medium transition-all"
                      >
                        ₹{amount}
                      </button>
                    ))}
                  </div>
                </div>

                <button
                  onClick={() => setDepositStep(3)}
                  disabled={!depositAmount || parseFloat(depositAmount) <= 0}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-emerald-500 to-teal-500 text-white font-bold text-lg shadow-lg hover:shadow-emerald-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none"
                >
                  Continue
                </button>
              </div>
            )}

            {/* Step 3: Enter Amount (USDT) */}
            {depositStep === 3 && depositMethod === 'usdt' && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Enter Deposit Amount</h3>
                  <p className="text-slate-400 text-sm">How much USDT would you like to deposit?</p>
                </div>

                <div className="space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Amount in USDT</label>
                    <div className="relative">
                      <span className="absolute left-4 top-1/2 -translate-y-1/2 text-slate-400 text-lg">$</span>
                      <input
                        type="number"
                        placeholder="0.00"
                        value={depositAmount}
                        onChange={(e) => setDepositAmount(e.target.value)}
                        className="w-full pl-10 pr-20 py-4 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-emerald-500 text-white text-lg font-semibold focus:outline-none transition-all"
                      />
                      <span className="absolute right-4 top-1/2 -translate-y-1/2 text-slate-400 font-medium">USDT</span>
                    </div>
                  </div>

                  <div className="flex flex-wrap gap-2">
                    {[10, 50, 100, 500].map((amount) => (
                      <button
                        key={amount}
                        onClick={() => setDepositAmount(amount.toString())}
                        className="px-4 py-2 rounded-lg bg-slate-700 hover:bg-slate-600 text-white text-sm font-medium transition-all"
                      >
                        ${amount}
                      </button>
                    ))}
                  </div>
                </div>

                <button
                  onClick={() => setDepositStep(4)}
                  disabled={!depositAmount || parseFloat(depositAmount) <= 0}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-emerald-500 to-teal-500 text-white font-bold text-lg shadow-lg hover:shadow-emerald-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none"
                >
                  Continue
                </button>
              </div>
            )}

            {/* Step 3: Confirm Deposit (INR) */}
            {depositStep === 3 && depositMethod === 'inr' && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Confirm Deposit Details</h3>
                  <p className="text-slate-400 text-sm">Review and submit your deposit request</p>
                </div>

                <div className="rounded-2xl bg-gradient-to-br from-blue-500/10 to-indigo-500/10 border border-blue-500/30 p-6 space-y-4">
                  <div className="flex items-center justify-between pb-3 border-b border-slate-700">
                    <span className="text-slate-400">Deposit Amount</span>
                    <span className="text-white font-bold text-xl">₹{depositAmount}</span>
                  </div>
                  
                  <div className="space-y-2">
                    <div className="flex items-center gap-2 text-emerald-400 text-sm">
                      <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z" clipRule="evenodd" />
                      </svg>
                      <span>UPI Payment: digilinex@axl</span>
                    </div>
                    <div className="flex items-center gap-2 text-amber-400 text-sm">
                      <svg className="w-5 h-5" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      <span>Admin verification required (24-48 hours)</span>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Your UPI ID *</label>
                    <input
                      type="text"
                      placeholder="yourname@upi"
                      value={upi}
                      onChange={(e) => setUpi(e.target.value)}
                      className="w-full px-4 py-3 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-blue-500 text-white focus:outline-none transition-all"
                    />
                    <p className="text-xs text-slate-400 mt-1">Enter the UPI ID you'll use for payment</p>
                  </div>
                </div>

                <button
                  onClick={handleDeposit}
                  disabled={isProcessing || !upi}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-emerald-500 to-teal-500 text-white font-bold text-lg shadow-lg hover:shadow-emerald-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none flex items-center justify-center gap-2"
                >
                  {isProcessing ? (
                    <>
                      <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                      </svg>
                      Processing...
                    </>
                  ) : (
                    'Submit Deposit Request'
                  )}
                </button>
              </div>
            )}

            {/* Step 4: Show Deposit Address (USDT) */}
            {depositStep === 4 && depositMethod === 'usdt' && blockchain && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Deposit Address</h3>
                  <p className="text-slate-400 text-sm">Send USDT to this address on {blockchain.toUpperCase()} network</p>
                </div>

                <div className="rounded-2xl bg-gradient-to-br from-amber-500/10 to-yellow-500/10 border border-amber-500/30 p-6 space-y-4">
                  <div className="flex items-center justify-between pb-3 border-b border-slate-700">
                    <span className="text-slate-400">Network</span>
                    <span className="text-white font-bold">{blockchain.toUpperCase()}</span>
                  </div>
                  
                  <div className="flex items-center justify-between pb-3 border-b border-slate-700">
                    <span className="text-slate-400">Amount</span>
                    <span className="text-white font-bold text-xl">{depositAmount} USDT</span>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Deposit Address</label>
                    <div className="relative">
                      <input
                        type="text"
                        value={depositAddress[blockchain]}
                        readOnly
                        className="w-full pr-12 px-4 py-3 rounded-xl bg-slate-800 border-2 border-slate-700 text-white text-sm font-mono focus:outline-none"
                      />
                      <button
                        onClick={() => copyToClipboard(depositAddress[blockchain])}
                        className="absolute right-2 top-1/2 -translate-y-1/2 p-2 rounded-lg bg-slate-700 hover:bg-slate-600 transition-all"
                      >
                        {copySuccess ? (
                          <svg className="w-5 h-5 text-emerald-400" fill="currentColor" viewBox="0 0 20 20">
                            <path fillRule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clipRule="evenodd" />
                          </svg>
                        ) : (
                          <svg className="w-5 h-5 text-slate-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M8 16H6a2 2 0 01-2-2V6a2 2 0 012-2h8a2 2 0 012 2v2m-6 12h8a2 2 0 002-2v-8a2 2 0 00-2-2h-8a2 2 0 00-2 2v8a2 2 0 002 2z" />
                          </svg>
                        )}
                      </button>
                    </div>
                  </div>

                  <div className="bg-amber-500/10 border border-amber-500/30 rounded-xl p-4">
                    <div className="flex gap-3">
                      <svg className="w-6 h-6 text-amber-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      <div className="text-sm text-amber-200">
                        <p className="font-semibold mb-1">Important</p>
                        <ul className="space-y-1 text-xs">
                          <li>• Only send USDT on {blockchain.toUpperCase()} network</li>
                          <li>• Sending other tokens may result in loss</li>
                          <li>• Minimum deposit: 10 USDT</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                <button
                  onClick={() => setDepositStep(5)}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-emerald-500 to-teal-500 text-white font-bold text-lg shadow-lg hover:shadow-emerald-500/50 transition-all"
                >
                  I've Sent the Payment
                </button>
              </div>
            )}

            {/* Step 5: Upload Transaction Hash (USDT) */}
            {depositStep === 5 && depositMethod === 'usdt' && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Confirm Payment</h3>
                  <p className="text-slate-400 text-sm">Enter your transaction details for verification</p>
                </div>

                <div className="rounded-2xl bg-gradient-to-br from-emerald-500/10 to-teal-500/10 border border-emerald-500/30 p-6 space-y-4">
                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Transaction Hash *</label>
                    <textarea
                      placeholder="Paste your transaction hash here (0x...)"
                      value={txHash}
                      onChange={(e) => setTxHash(e.target.value)}
                      rows={3}
                      className="w-full px-4 py-3 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-emerald-500 text-white text-sm font-mono focus:outline-none transition-all resize-none"
                    />
                    <p className="text-xs text-slate-400 mt-1">Find this in your wallet's transaction history</p>
                  </div>

                  <div className="bg-blue-500/10 border border-blue-500/30 rounded-xl p-4">
                    <div className="flex gap-3">
                      <svg className="w-6 h-6 text-blue-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      <div className="text-sm text-blue-200">
                        <p className="font-semibold mb-1">Verification Process</p>
                        <p className="text-xs">Your deposit will be verified by our admin team within 24-48 hours. You'll receive a notification once approved.</p>
                      </div>
                    </div>
                  </div>
                </div>

                <button
                  onClick={handleDeposit}
                  disabled={isProcessing || !txHash}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-emerald-500 to-teal-500 text-white font-bold text-lg shadow-lg hover:shadow-emerald-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none flex items-center justify-center gap-2"
                >
                  {isProcessing ? (
                    <>
                      <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                      </svg>
                      Submitting...
                    </>
                  ) : (
                    'Submit Deposit Request'
                  )}
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderWithdrawFlow = () => {
    const getTotalSteps = () => {
      if (withdrawMethod === 'inr') return 3;
      if (withdrawMethod === 'usdt') return 4;
      return 4;
    };

    return (
      <div className={`min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-white transition-opacity duration-500 ${isTransitioning ? 'opacity-0' : 'opacity-100'}`}>
        <div className="container mx-auto px-4 py-8 max-w-lg min-h-screen flex flex-col">
          {/* Header */}
          <div className="mb-6">
            <button
              onClick={() => withdrawStep === 1 ? handleFlowChange(null) : setWithdrawStep(withdrawStep - 1)}
              className="flex items-center gap-2 text-slate-400 hover:text-white transition-colors mb-4"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
              </svg>
              <span>Back</span>
            </button>
            <h2 className="text-3xl font-bold bg-gradient-to-r from-rose-400 to-pink-400 bg-clip-text text-transparent">
              Withdraw Funds
            </h2>
          </div>

          <ProgressBar currentStep={withdrawStep} totalSteps={getTotalSteps()} />

          <div className="flex-1 flex flex-col">
            {/* Step 1: Enter Amount */}
            {withdrawStep === 1 && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Enter Withdrawal Amount</h3>
                  <p className="text-slate-400 text-sm">How much would you like to withdraw?</p>
                </div>

                <div className="space-y-4">
                  <div className="rounded-xl bg-slate-800/50 border border-slate-700 p-4">
                    <div className="flex items-center justify-between text-sm mb-2">
                      <span className="text-slate-400">Available Balance</span>
                      <span className="text-white font-bold">{mainUsdt.toFixed(2)} USDT</span>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Withdrawal Amount</label>
                    <div className="relative">
                      <span className="absolute left-4 top-1/2 -translate-y-1/2 text-slate-400 text-lg">$</span>
                      <input
                        type="number"
                        placeholder="0.00"
                        value={withdrawAmount}
                        onChange={(e) => setWithdrawAmount(e.target.value)}
                        className="w-full pl-10 pr-20 py-4 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-rose-500 text-white text-lg font-semibold focus:outline-none transition-all"
                      />
                      <span className="absolute right-4 top-1/2 -translate-y-1/2 text-slate-400 font-medium">USDT</span>
                    </div>
                  </div>

                  <div className="flex items-center justify-between">
                    <div className="flex flex-wrap gap-2">
                      {[10, 50, 100].map((amount) => (
                        <button
                          key={amount}
                          onClick={() => setWithdrawAmount(amount.toString())}
                          className="px-4 py-2 rounded-lg bg-slate-700 hover:bg-slate-600 text-white text-sm font-medium transition-all"
                        >
                          ${amount}
                        </button>
                      ))}
                    </div>
                    <button
                      onClick={() => setWithdrawAmount(mainUsdt.toFixed(2))}
                      className="px-4 py-2 rounded-lg bg-rose-500/20 hover:bg-rose-500/30 text-rose-400 text-sm font-medium transition-all"
                    >
                      MAX
                    </button>
                  </div>
                </div>

                <button
                  onClick={() => setWithdrawStep(2)}
                  disabled={!withdrawAmount || parseFloat(withdrawAmount) <= 0 || parseFloat(withdrawAmount) > mainUsdt}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-rose-500 to-pink-500 text-white font-bold text-lg shadow-lg hover:shadow-rose-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none"
                >
                  Continue
                </button>
              </div>
            )}

            {/* Step 2: Select Withdrawal Method */}
            {withdrawStep === 2 && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Select Payment Method</h3>
                  <p className="text-slate-400 text-sm">Choose how you want to receive funds</p>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <button
                    onClick={() => {
                      setWithdrawMethod('usdt');
                      setWithdrawStep(3);
                    }}
                    className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-amber-500/20 to-yellow-500/20 border-2 border-amber-500/30 hover:border-amber-500 p-8 transition-all duration-300 hover:scale-105"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-amber-500/0 to-yellow-500/0 group-hover:from-amber-500/10 group-hover:to-yellow-500/10 transition-all duration-300" />
                    <div className="text-6xl mb-4">💵</div>
                    <p className="text-white font-bold text-lg">USDT</p>
                    <p className="text-slate-400 text-xs mt-1">Cryptocurrency</p>
                  </button>

                  <button
                    onClick={() => {
                      setWithdrawMethod('inr');
                      setWithdrawStep(3);
                    }}
                    className="group relative overflow-hidden rounded-2xl bg-gradient-to-br from-blue-500/20 to-indigo-500/20 border-2 border-blue-500/30 hover:border-blue-500 p-8 transition-all duration-300 hover:scale-105"
                  >
                    <div className="absolute inset-0 bg-gradient-to-br from-blue-500/0 to-indigo-500/0 group-hover:from-blue-500/10 group-hover:to-indigo-500/10 transition-all duration-300" />
                    <div className="text-6xl mb-4">🇮🇳</div>
                    <p className="text-white font-bold text-lg">INR</p>
                    <p className="text-slate-400 text-xs mt-1">Indian Rupee</p>
                  </button>
                </div>
              </div>
            )}

            {/* Step 3: Select Blockchain & Enter Address (USDT) */}
            {withdrawStep === 3 && withdrawMethod === 'usdt' && !blockchain && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Select Blockchain Network</h3>
                  <p className="text-slate-400 text-sm">Choose the network for your withdrawal</p>
                </div>

                <div className="space-y-4">
                  <button
                    onClick={() => setBlockchain('bep20')}
                    className="group w-full relative overflow-hidden rounded-2xl bg-gradient-to-r from-yellow-500/20 to-amber-500/20 border-2 border-yellow-500/30 hover:border-yellow-500 p-6 transition-all duration-300 hover:scale-102 text-left"
                  >
                    <div className="absolute inset-0 bg-gradient-to-r from-yellow-500/0 to-amber-500/0 group-hover:from-yellow-500/10 group-hover:to-amber-500/10 transition-all duration-300" />
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-yellow-500 to-amber-500 flex items-center justify-center flex-shrink-0">
                        <span className="text-2xl">🔗</span>
                      </div>
                      <div>
                        <p className="text-white font-bold text-lg">Binance Smart Chain</p>
                        <p className="text-slate-400 text-sm">BEP20 Network</p>
                      </div>
                    </div>
                  </button>

                  <button
                    onClick={() => setBlockchain('trc20')}
                    className="group w-full relative overflow-hidden rounded-2xl bg-gradient-to-r from-red-500/20 to-rose-500/20 border-2 border-red-500/30 hover:border-red-500 p-6 transition-all duration-300 hover:scale-102 text-left"
                  >
                    <div className="absolute inset-0 bg-gradient-to-r from-red-500/0 to-rose-500/0 group-hover:from-red-500/10 group-hover:to-rose-500/10 transition-all duration-300" />
                    <div className="flex items-center gap-4">
                      <div className="w-12 h-12 rounded-xl bg-gradient-to-br from-red-500 to-rose-500 flex items-center justify-center flex-shrink-0">
                        <span className="text-2xl">⚡</span>
                      </div>
                      <div>
                        <p className="text-white font-bold text-lg">TRON Network</p>
                        <p className="text-slate-400 text-sm">TRC20 Network</p>
                      </div>
                    </div>
                  </button>
                </div>
              </div>
            )}

            {withdrawStep === 3 && withdrawMethod === 'usdt' && blockchain && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Enter Wallet Address</h3>
                  <p className="text-slate-400 text-sm">Provide your {blockchain.toUpperCase()} wallet address</p>
                </div>

                <div className="space-y-4">
                  <div className="rounded-xl bg-slate-800/50 border border-slate-700 p-4 space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400">Network</span>
                      <span className="text-white font-bold">{blockchain.toUpperCase()}</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400">Amount</span>
                      <span className="text-white font-bold">{withdrawAmount} USDT</span>
                    </div>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">Wallet Address *</label>
                    <textarea
                      placeholder={`Enter your ${blockchain.toUpperCase()} wallet address`}
                      value={walletAddress}
                      onChange={(e) => setWalletAddress(e.target.value)}
                      rows={3}
                      className="w-full px-4 py-3 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-rose-500 text-white text-sm font-mono focus:outline-none transition-all resize-none"
                    />
                  </div>

                  <div className="bg-amber-500/10 border border-amber-500/30 rounded-xl p-4">
                    <div className="flex gap-3">
                      <svg className="w-6 h-6 text-amber-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                      </svg>
                      <div className="text-sm text-amber-200">
                        <p className="font-semibold mb-1">Important</p>
                        <ul className="space-y-1 text-xs">
                          <li>• Double-check your wallet address</li>
                          <li>• Ensure it matches {blockchain.toUpperCase()} network</li>
                          <li>• Wrong address = permanent loss of funds</li>
                        </ul>
                      </div>
                    </div>
                  </div>
                </div>

                <button
                  onClick={() => setWithdrawStep(4)}
                  disabled={!walletAddress}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-rose-500 to-pink-500 text-white font-bold text-lg shadow-lg hover:shadow-rose-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none"
                >
                  Continue
                </button>
              </div>
            )}

            {/* Step 3: Enter UPI (INR) */}
            {withdrawStep === 3 && withdrawMethod === 'inr' && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Enter UPI Details</h3>
                  <p className="text-slate-400 text-sm">Provide your UPI ID for withdrawal</p>
                </div>

                <div className="space-y-4">
                  <div className="rounded-xl bg-slate-800/50 border border-slate-700 p-4">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400">Withdrawal Amount</span>
                      <span className="text-white font-bold">₹{(parseFloat(withdrawAmount) * 80).toFixed(2)}</span>
                    </div>
                    <p className="text-xs text-slate-400 mt-1">Approx. conversion rate: 1 USDT ≈ ₹80</p>
                  </div>

                  <div>
                    <label className="block text-sm font-medium text-slate-300 mb-2">UPI ID *</label>
                    <input
                      type="text"
                      placeholder="yourname@upi"
                      value={upi}
                      onChange={(e) => setUpi(e.target.value)}
                      className="w-full px-4 py-3 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-rose-500 text-white focus:outline-none transition-all"
                    />
                    <p className="text-xs text-slate-400 mt-1">Enter your UPI ID to receive payment</p>
                  </div>

                  <div className="bg-blue-500/10 border border-blue-500/30 rounded-xl p-4">
                    <div className="flex gap-3">
                      <svg className="w-6 h-6 text-blue-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      <div className="text-sm text-blue-200">
                        <p className="font-semibold mb-1">Verification Process</p>
                        <p className="text-xs">Your withdrawal will be verified by our admin team within 24-48 hours. Funds will be sent to your UPI ID once approved.</p>
                      </div>
                    </div>
                  </div>
                </div>

                <button
                  onClick={handleWithdraw}
                  disabled={isProcessing || !upi}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-rose-500 to-pink-500 text-white font-bold text-lg shadow-lg hover:shadow-rose-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none flex items-center justify-center gap-2"
                >
                  {isProcessing ? (
                    <>
                      <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                      </svg>
                      Processing...
                    </>
                  ) : (
                    'Submit Withdrawal Request'
                  )}
                </button>
              </div>
            )}

            {/* Step 4: Confirm (USDT) */}
            {withdrawStep === 4 && withdrawMethod === 'usdt' && (
              <div className="space-y-6 animate-fadeIn">
                <div>
                  <h3 className="text-xl font-semibold text-white mb-2">Confirm Withdrawal</h3>
                  <p className="text-slate-400 text-sm">Review your withdrawal details</p>
                </div>

                <div className="rounded-2xl bg-gradient-to-br from-rose-500/10 to-pink-500/10 border border-rose-500/30 p-6 space-y-4">
                  <div className="space-y-3">
                    <div className="flex items-center justify-between pb-3 border-b border-slate-700">
                      <span className="text-slate-400">Network</span>
                      <span className="text-white font-bold">{blockchain?.toUpperCase()}</span>
                    </div>
                    <div className="flex items-center justify-between pb-3 border-b border-slate-700">
                      <span className="text-slate-400">Amount</span>
                      <span className="text-white font-bold text-xl">{withdrawAmount} USDT</span>
                    </div>
                    <div className="pb-3 border-b border-slate-700">
                      <span className="text-slate-400 text-sm block mb-2">Wallet Address</span>
                      <span className="text-white text-xs font-mono break-all">{walletAddress}</span>
                    </div>
                  </div>

                  <div className="bg-amber-500/10 border border-amber-500/30 rounded-xl p-4">
                    <div className="flex gap-3">
                      <svg className="w-6 h-6 text-amber-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                        <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                      </svg>
                      <div className="text-sm text-amber-200">
                        <p className="font-semibold mb-1">Verification Process</p>
                        <p className="text-xs">Your withdrawal will be processed within 24-48 hours after admin verification. Please ensure all details are correct.</p>
                      </div>
                    </div>
                  </div>
                </div>

                <button
                  onClick={handleWithdraw}
                  disabled={isProcessing}
                  className="w-full py-4 rounded-xl bg-gradient-to-r from-rose-500 to-pink-500 text-white font-bold text-lg shadow-lg hover:shadow-rose-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none flex items-center justify-center gap-2"
                >
                  {isProcessing ? (
                    <>
                      <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                        <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                        <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                      </svg>
                      Submitting...
                    </>
                  ) : (
                    'Submit Withdrawal Request'
                  )}
                </button>
              </div>
            )}
          </div>
        </div>
      </div>
    );
  };

  const renderSwapFlow = () => (
    <div className={`min-h-screen bg-gradient-to-br from-slate-950 via-slate-900 to-slate-950 text-white transition-opacity duration-500 ${isTransitioning ? 'opacity-0' : 'opacity-100'}`}>
      <div className="container mx-auto px-4 py-8 max-w-lg min-h-screen flex flex-col">
        {/* Header */}
        <div className="mb-6">
          <button
            onClick={() => swapStep === 1 ? handleFlowChange(null) : setSwapStep(swapStep - 1)}
            className="flex items-center gap-2 text-slate-400 hover:text-white transition-colors mb-4"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
            </svg>
            <span>Back</span>
          </button>
          <h2 className="text-3xl font-bold bg-gradient-to-r from-violet-400 to-fuchsia-400 bg-clip-text text-transparent">
            DLX to USDT Swap
          </h2>
        </div>

        <ProgressBar currentStep={swapStep} totalSteps={3} />

        <div className="flex-1 flex flex-col">
          {/* Step 1: Enter DLX Amount */}
          {swapStep === 1 && (
            <div className="space-y-6 animate-fadeIn">
              <div>
                <h3 className="text-xl font-semibold text-white mb-2">Enter Swap Amount</h3>
                <p className="text-slate-400 text-sm">Convert your DLX tokens to USDT</p>
              </div>

              <div className="space-y-4">
                <div className="rounded-xl bg-slate-800/50 border border-slate-700 p-4 space-y-2">
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-slate-400">Available DLX</span>
                    <span className="text-white font-bold">{wallet.dlx.toFixed(2)} DLX</span>
                  </div>
                  <div className="flex items-center justify-between text-sm">
                    <span className="text-slate-400">USD Value</span>
                    <span className="text-white font-bold">${dlxUsdValue.toFixed(2)}</span>
                  </div>
                </div>

                <div>
                  <label className="block text-sm font-medium text-slate-300 mb-2">DLX Amount (Minimum 50 DLX)</label>
                  <div className="relative">
                    <input
                      type="number"
                      placeholder="50.00"
                      value={swapAmount}
                      onChange={(e) => setSwapAmount(e.target.value)}
                      className="w-full px-4 pr-16 py-4 rounded-xl bg-slate-800 border-2 border-slate-700 focus:border-violet-500 text-white text-lg font-semibold focus:outline-none transition-all"
                    />
                    <span className="absolute right-4 top-1/2 -translate-y-1/2 text-slate-400 font-medium">DLX</span>
                  </div>
                </div>

                <div className="flex items-center justify-between">
                  <div className="flex flex-wrap gap-2">
                    {[50, 100, 500].map((amount) => (
                      <button
                        key={amount}
                        onClick={() => setSwapAmount(amount.toString())}
                        disabled={amount > wallet.dlx}
                        className="px-4 py-2 rounded-lg bg-slate-700 hover:bg-slate-600 text-white text-sm font-medium transition-all disabled:opacity-50 disabled:cursor-not-allowed"
                      >
                        {amount} DLX
                      </button>
                    ))}
                  </div>
                  <button
                    onClick={() => setSwapAmount(wallet.dlx.toFixed(2))}
                    className="px-4 py-2 rounded-lg bg-violet-500/20 hover:bg-violet-500/30 text-violet-400 text-sm font-medium transition-all"
                  >
                    MAX
                  </button>
                </div>

                {swapAmount && parseFloat(swapAmount) >= 50 && (
                  <div className="rounded-xl bg-gradient-to-r from-violet-500/10 to-fuchsia-500/10 border border-violet-500/30 p-4">
                    <div className="flex items-center justify-between">
                      <span className="text-slate-300">You will receive</span>
                      <span className="text-white font-bold text-xl">{swapUsdtValue.toFixed(2)} USDT</span>
                    </div>
                    <p className="text-xs text-slate-400 mt-2">Exchange Rate: 1 DLX = 0.1 USDT</p>
                  </div>
                )}
              </div>

              <button
                onClick={() => setSwapStep(2)}
                disabled={!swapAmount || parseFloat(swapAmount) < 50 || parseFloat(swapAmount) > wallet.dlx}
                className="w-full py-4 rounded-xl bg-gradient-to-r from-violet-500 to-fuchsia-500 text-white font-bold text-lg shadow-lg hover:shadow-violet-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none"
              >
                Continue
              </button>
            </div>
          )}

          {/* Step 2: Review Swap */}
          {swapStep === 2 && (
            <div className="space-y-6 animate-fadeIn">
              <div>
                <h3 className="text-xl font-semibold text-white mb-2">Review Swap Details</h3>
                <p className="text-slate-400 text-sm">Confirm the exchange details</p>
              </div>

              <div className="space-y-4">
                {/* Swap Visual */}
                <div className="rounded-2xl bg-gradient-to-br from-violet-500/10 to-fuchsia-500/10 border border-violet-500/30 p-6">
                  <div className="flex items-center justify-between mb-6">
                    <div className="flex-1">
                      <p className="text-slate-400 text-sm mb-1">From</p>
                      <div className="flex items-center gap-3">
                        <div className="w-10 h-10 rounded-full bg-gradient-to-br from-cyan-500 to-blue-500 flex items-center justify-center">
                          <span className="text-white font-bold text-sm">DLX</span>
                        </div>
                        <div>
                          <p className="text-white font-bold text-xl">{swapAmount}</p>
                          <p className="text-slate-400 text-xs">DLX Tokens</p>
                        </div>
                      </div>
                    </div>

                    <svg className="w-8 h-8 text-violet-400 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7l5 5m0 0l-5 5m5-5H6" />
                    </svg>

                    <div className="flex-1 text-right">
                      <p className="text-slate-400 text-sm mb-1">To</p>
                      <div className="flex items-center gap-3 justify-end">
                        <div>
                          <p className="text-white font-bold text-xl">{swapUsdtValue.toFixed(2)}</p>
                          <p className="text-slate-400 text-xs">USDT</p>
                        </div>
                        <div className="w-10 h-10 rounded-full bg-gradient-to-br from-emerald-500 to-teal-500 flex items-center justify-center">
                          <span className="text-white font-bold text-sm">$</span>
                        </div>
                      </div>
                    </div>
                  </div>

                  <div className="pt-4 border-t border-slate-700/50 space-y-2">
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400">Exchange Rate</span>
                      <span className="text-white">1 DLX = 0.1 USDT</span>
                    </div>
                    <div className="flex items-center justify-between text-sm">
                      <span className="text-slate-400">Network Fee</span>
                      <span className="text-emerald-400 font-medium">FREE</span>
                    </div>
                  </div>
                </div>

                <div className="bg-blue-500/10 border border-blue-500/30 rounded-xl p-4">
                  <div className="flex gap-3">
                    <svg className="w-6 h-6 text-blue-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                    <div className="text-sm text-blue-200">
                      <p className="font-semibold mb-1">About DLX Swap</p>
                      <p className="text-xs">DLX tokens will be converted to USDT and credited to your Purchase Wallet. Admin verification required (24-48 hours).</p>
                    </div>
                  </div>
                </div>
              </div>

              <button
                onClick={() => setSwapStep(3)}
                className="w-full py-4 rounded-xl bg-gradient-to-r from-violet-500 to-fuchsia-500 text-white font-bold text-lg shadow-lg hover:shadow-violet-500/50 transition-all"
              >
                Continue to Confirm
              </button>
            </div>
          )}

          {/* Step 3: Confirm Swap */}
          {swapStep === 3 && (
            <div className="space-y-6 animate-fadeIn">
              <div>
                <h3 className="text-xl font-semibold text-white mb-2">Confirm Swap Transaction</h3>
                <p className="text-slate-400 text-sm">Final confirmation before processing</p>
              </div>

              <div className="rounded-2xl bg-gradient-to-br from-violet-500/10 to-fuchsia-500/10 border border-violet-500/30 p-6 space-y-4">
                <div className="text-center pb-4 border-b border-slate-700">
                  <p className="text-slate-400 text-sm mb-2">You're swapping</p>
                  <p className="text-white font-bold text-3xl mb-1">{swapAmount} DLX</p>
                  <p className="text-slate-400 text-sm">for</p>
                  <p className="text-emerald-400 font-bold text-3xl mt-1">{swapUsdtValue.toFixed(2)} USDT</p>
                </div>

                <div className="space-y-2 text-sm">
                  <div className="flex items-center justify-between">
                    <span className="text-slate-400">Current Balance</span>
                    <span className="text-white">{wallet.dlx.toFixed(2)} DLX</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-slate-400">After Swap</span>
                    <span className="text-white">{(wallet.dlx - parseFloat(swapAmount)).toFixed(2)} DLX</span>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-slate-400">USDT Credit</span>
                    <span className="text-emerald-400 font-bold">+{swapUsdtValue.toFixed(2)} USDT</span>
                  </div>
                </div>

                <div className="bg-amber-500/10 border border-amber-500/30 rounded-xl p-4">
                  <div className="flex gap-3">
                    <svg className="w-6 h-6 text-amber-400 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
                      <path fillRule="evenodd" d="M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7-4a1 1 0 11-2 0 1 1 0 012 0zM9 9a1 1 0 000 2v3a1 1 0 001 1h1a1 1 0 100-2v-3a1 1 0 00-1-1H9z" clipRule="evenodd" />
                    </svg>
                    <div className="text-sm text-amber-200">
                      <p className="font-semibold mb-1">Important Notice</p>
                      <p className="text-xs">This transaction requires admin verification and will be processed within 24-48 hours. Once confirmed, this action cannot be reversed.</p>
                    </div>
                  </div>
                </div>
              </div>

              <button
                onClick={handleSwap}
                disabled={isProcessing}
                className="w-full py-4 rounded-xl bg-gradient-to-r from-violet-500 to-fuchsia-500 text-white font-bold text-lg shadow-lg hover:shadow-violet-500/50 transition-all disabled:opacity-50 disabled:cursor-not-allowed disabled:hover:shadow-none flex items-center justify-center gap-2"
              >
                {isProcessing ? (
                  <>
                    <svg className="animate-spin h-5 w-5" viewBox="0 0 24 24">
                      <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4" fill="none" />
                      <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z" />
                    </svg>
                    Processing Swap...
                  </>
                ) : (
                  'Confirm & Submit Swap'
                )}
              </button>
            </div>
          )}
        </div>
      </div>
    </div>
  );

  return (
    <>
      {activeFlow === null && renderMainPage()}
      {activeFlow === 'deposit' && renderDepositFlow()}
      {activeFlow === 'withdraw' && renderWithdrawFlow()}
      {activeFlow === 'swap' && renderSwapFlow()}
    </>
  );
}